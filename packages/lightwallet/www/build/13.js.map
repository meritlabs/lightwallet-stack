{"version":3,"sources":["../../src/app/settings/notifications/notifications.module.ts","../../src/app/shared/shared.module.ts","../../src/app/shared/to-unit.pipe.ts","../../src/app/shared/to-fiat.pipe.ts","../../src/app/settings/notifications/notifications.ts","../../src/app/shared/email.validator.ts"],"names":[],"mappings":"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","file":"13.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { IonicPageModule } from 'ionic-angular';\nimport { NotificationsView } from 'merit/settings/notifications/notifications';\nimport { PushNotificationsService } from 'merit/core/notification/push-notification.service';\nimport { SharedModule } from 'merit/shared/shared.module';\nimport { EmailNotificationsService } from 'merit/core/notification/email-notification.service';\n\n\n// This module manaages the sending of money.\n// This is the first of three steps.\n@NgModule({ \n  declarations: [\n    NotificationsView \n  ],\n  imports: [\n    IonicPageModule.forChild(NotificationsView),\n    SharedModule    \n    ],\n  providers: [\n    PushNotificationsService,\n    EmailNotificationsService \n  ],\n  exports: [\n  ]\n})\nexport class NotificationsViewModule {}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/settings/notifications/notifications.module.ts","import { NgModule } from '@angular/core';\nimport { GravatarComponent } from 'merit/shared/gravatar.component';\nimport { ToUnitPipe } from 'merit/shared/to-unit.pipe';\nimport { ToFiatPipe } from 'merit/shared/to-fiat.pipe';\nimport { TranslateModule } from '@ngx-translate/core';\n\n// This module manaages the sending of money.\n@NgModule({\n  declarations: [\n    ToUnitPipe,\n    ToFiatPipe\n  ],\n  imports: [\n  ],\n  exports: [\n    ToUnitPipe,\n    ToFiatPipe,\n    TranslateModule\n  ]\n})\nexport class SharedModule {}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/shared/shared.module.ts","import { Pipe, PipeTransform } from '@angular/core';\nimport { ConfigService } from 'merit/shared/config.service';\nimport { TxFormatService } from 'merit/transact/tx-format.service';\n\n@Pipe({ name: 'toUnit' })\nexport class ToUnitPipe implements PipeTransform {\n  private unitCode: string;\n  \n  constructor(\n    private configProvider: ConfigService,\n    private txFormatProvider: TxFormatService\n  ) {\n    this.unitCode = this.configProvider.get().wallet.settings.unitCode;\n  }\n  transform(value: string, satoshis: number): any {\n    return this.txFormatProvider.formatAmountStr(satoshis);\n  }\n}\n\n\n// WEBPACK FOOTER //\n// ./src/app/shared/to-unit.pipe.ts","import { Pipe, PipeTransform } from '@angular/core';\nimport { ConfigService } from 'merit/shared/config.service';\nimport { TxFormatService } from 'merit/transact/tx-format.service';\nimport * as Promise from 'bluebird';\n\n@Pipe({ name: 'toFiat' })\nexport class ToFiatPipe implements PipeTransform {\n  private unitCode: string;\n\n  constructor(\n    private configProvider: ConfigService,\n    private txFormatProvider: TxFormatService\n  ) { \n    this.unitCode = this.configProvider.get().wallet.settings.unitCode;\n  }\n  transform(value: string, satoshis: number): Promise<string> {\n    return this.txFormatProvider.formatAlternativeStr(satoshis).then((altSr:string) => {\n      return Promise.resolve(altSr);\n    });\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/shared/to-fiat.pipe.ts","import { Component } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { NavController, NavParams, IonicPage } from 'ionic-angular';\nimport { ConfigService } from 'merit/shared/config.service';\nimport { AppService } from 'merit/core/app-settings.service';\nimport { PlatformService } from 'merit/core/platform.service';\nimport { PushNotificationsService } from 'merit/core/notification/push-notification.service';\nimport { EmailNotificationsService } from 'merit/core/notification/email-notification.service';\nimport { EmailValidator } from 'merit/shared/email.validator';\n\n@IonicPage()\n@Component({\n  selector: 'notifications-view',\n  templateUrl: 'notifications.html',\n})\nexport class NotificationsView {\n  public emailForm: FormGroup;\n\n  public appName: string;\n  public usePushNotifications: boolean;\n  public isIOSApp: boolean;\n\n  public pushNotifications: boolean;\n  public confirmedTxsNotifications: boolean;\n\n  public emailNotifications: boolean;\n\n  constructor(\n    public navCtrl: NavController,\n    public navParams: NavParams,\n    public formBuilder: FormBuilder,\n    private configService: ConfigService,\n    private appService: AppService,\n    private platformService: PlatformService,\n    private pushService: PushNotificationsService,\n    private emailService: EmailNotificationsService\n  ) {\n    this.emailForm = this.formBuilder.group({\n      email: ['', Validators.compose([Validators.required, new EmailValidator(configService, emailService).isValid])]\n    });\n  }\n\nionViewDidLoad() {\n  console.log('ionViewDidLoad NotificationsPage');\n  this.updateConfig();\n}\n\nprivate updateConfig() {\n  let config = this.configService.get();\n  this.appName = this.appService.info.nameCase;\n  this.usePushNotifications = this.platformService.isCordova;\n  this.isIOSApp = this.platformService.isIOS && this.platformService.isCordova;\n\n  this.pushNotifications = config.pushNotificationsEnabled;\n  this.confirmedTxsNotifications = config.confirmedTxsNotifications ? config.confirmedTxsNotifications.enabled : false;\n\n  this.emailForm.setValue({\n    email: this.emailService.getEmailIfEnabled(config) || ''\n  });\n\n  this.emailNotifications = config.emailNotifications ? config.emailNotifications.enabled : false;\n};\n\npublic pushNotificationsChange() {\n  let opts = {\n    pushNotificationsEnabled: this.pushNotifications\n  };\n\n  this.configService.set(opts);\n\n  if (opts.pushNotificationsEnabled)\n    this.pushService.init();\n  else\n    this.pushService.disable();\n};\n\npublic confirmedTxsNotificationsChange() {\n  let opts = {\n    confirmedTxsNotifications: {\n      enabled: this.confirmedTxsNotifications\n    }\n  };\n  this.configService.set(opts);\n};\n\npublic emailNotificationsChange() {\n  let opts = {\n    enabled: this.emailNotifications,\n    email: this.emailForm.value.email\n  };\n  this.emailService.updateEmail(opts);\n};\n\npublic saveEmail() {\n  this.emailService.updateEmail({\n    enabled: this.emailNotifications,\n    email: this.emailForm.value.email\n  });\n\n};\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/settings/notifications/notifications.ts","import { FormControl } from '@angular/forms';\nimport { ConfigService } from 'merit/shared/config.service';\nimport { EmailNotificationsService } from 'merit/core/notification/email-notification.service';\n\nexport class EmailValidator {\n\n  static cnf: ConfigService;\n  static eml: EmailNotificationsService;\n\n  constructor(cnf: ConfigService, eml: EmailNotificationsService) {\n    EmailValidator.cnf = cnf;\n    EmailValidator.eml = eml;\n  }\n\n  isValid(control: FormControl): any {\n\n    let config = EmailValidator.cnf.get();\n    let latestEmail = EmailValidator.eml.getEmailIfEnabled(config);\n\n    let validEmail = (/^[a-zA-Z0-9.!#$%&*+=?^_{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/).test(control.value);\n    if (validEmail && control.value != latestEmail) {\n      return null;\n    }\n\n    return {\n      \"Invalid Email\": true\n    };\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/shared/email.validator.ts"],"sourceRoot":""}