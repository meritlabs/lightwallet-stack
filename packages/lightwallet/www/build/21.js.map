{"version":3,"sources":["../../src/app/vaults/renew-vault/renew-vault.module.ts","../../src/app/vaults/renew-vault/renew-vault.service.ts","../../src/app/vaults/renew-vault/renew-vault.ts"],"names":[],"mappings":"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","file":"21.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { IonicPageModule } from 'ionic-angular';\n\nimport { VaultRenewView } from 'merit/vaults/renew-vault/renew-vault';\n\nimport { PopupService } from \"merit/core/popup.service\";\nimport { RenewVaultService } from 'merit/vaults/renew-vault/renew-vault.service';\n\n@NgModule({\n  declarations: [\n    VaultRenewView,\n  ],\n  providers: [\n    PopupService,\n    RenewVaultService,\n  ],\n  imports: [\n    IonicPageModule.forChild(VaultRenewView),\n  ],\n})\nexport class VaultRenewViewModule {}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/vaults/renew-vault/renew-vault.module.ts","import { Injectable } from '@angular/core';\nimport * as Promise from 'bluebird';\nimport { BwcService } from 'merit/core/bwc.service';\nimport { WalletService } from \"merit/wallets/wallet.service\";\nimport { Logger } from 'merit/core/logger';\nimport { ProfileService } from 'merit/core/profile.service';\nimport * as _ from 'lodash';\nimport { VaultsService } from 'merit/vaults/vaults.service';\nimport { MeritWalletClient } from 'src/lib/merit-wallet-client';\n\n\n@Injectable()\nexport class RenewVaultService {\n\n    private bitcore: any;\n    private walletClient: MeritWalletClient = null;\n    private vault: any;\n\n    constructor(\n        private bwcService: BwcService,\n        private walletService: WalletService,\n        private logger: Logger,\n        private profileService: ProfileService,\n        private vaultsService: VaultsService,\n    ){\n        this.bitcore = bwcService.getBitcore();\n    }\n\n    renewVault(vault: any, masterKey: any): Promise<any> {\n        return this.profileService.getHeadWalletClient().then((walletClient) => {\n          if (!this.walletClient) {\n              this.walletClient = walletClient;\n          }\n          return this.vaultsService.getVaultCoins(walletClient, vault);\n        }).then((coins) => {\n      \n            let address = this.bitcore.Address.fromObject(vault.address);\n            let network = this.walletClient.credentials.network;\n\n            let tx = this.walletClient.buildRenewVaultTx(coins, vault, masterKey, {network: network});\n    \n            console.log(\"RENEW TX\");\n            console.log('tx: ', tx);\n            console.log('Serialized: ', tx.serialize());\n            vault.coins = [{ raw: tx.serialize(), network: network}];\n\n            return this.walletClient.renewVault(vault);\n        }).catch((err) => {\n            throw err;\n        });;\n    }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/vaults/renew-vault/renew-vault.service.ts","import * as _ from 'lodash';\nimport { Component } from '@angular/core';\nimport { IonicPage, NavController, NavParams } from 'ionic-angular';\nimport { PopupService } from \"merit/core/popup.service\";\nimport * as Promise from 'bluebird';\nimport { WalletService } from 'merit/wallets/wallet.service';\nimport { VaultsService } from 'merit/vaults/vaults.service';\nimport { BwcService } from 'merit/core/bwc.service';\nimport { ProfileService } from 'merit/core/profile.service';\nimport { MeritWalletClient } from 'src/lib/merit-wallet-client';\nimport { RenewVaultService } from 'merit/vaults/renew-vault/renew-vault.service';\nimport { ConfigService } from 'merit/shared/config.service';\n\nexport interface IWhitelistEntry {\n    id: string,\n    name: string,\n    address: string,\n    type: string,\n    walletClient?: any,\n}\n\nexport interface IVaultRenewViewModel {\n    vaultName: string, \n    masterKey: string,\n    whitelist: Array<IWhitelistEntry>,\n}\n\n@IonicPage({\n  segment: 'vault/:vaultId/renew',\n  defaultHistory: ['VaultDetailsView']\n})\n@Component({\n  selector: 'view-renew',\n  templateUrl: 'renew-vault.html',\n})\nexport class VaultRenewView {\n\n  public vault: any = null;\n  public formData: IVaultRenewViewModel = { vaultName: '', masterKey: '', whitelist: [] };\n  public whitelistCandidates: Array<IWhitelistEntry> = [];\n  public canConfirm: boolean;\n  private bitcore: any = null;\n  private walletClient: MeritWalletClient;\n\n  constructor(\n    private navCtrl:NavController,\n    public navParams: NavParams,\n    private popupService: PopupService,\n    private configService: ConfigService,\n    private bwc: BwcService,  \n    private walletService: WalletService,\n    private vaultsService: VaultsService,  \n    private profileService: ProfileService,\n  ){\n    this.vault = this.navParams.get('vault');\n    this.bitcore = this.bwc.getBitcore();\n  }\n\n  async ionViewDidLoad() {\n    await this.updateWhitelist();\n    this.formData.vaultName = this.vault.name;\n    this.formData.masterKey = '';\n    this.checkCanConfirm();\n  }\n\n  checkCanConfirm() {\n    this.canConfirm = \n      this.formData.vaultName.length > 0 && \n      this.formData.whitelist.length > 0;\n  }\n\n  confirmRenew() {\n    this.popupService.ionicConfirm(\n        'Reset vault?', \n        'All pending transactions will be canceled and timeout will be reset. Do you want to reset the vault?', \n        'Yes', \n        'No').then((result: boolean) => {\n          if (result) this.toVault();\n          return;\n        });\n  }\n\n  toVault() {\n    const newVault = _.cloneDeep(this.vault);\n    Promise.map(this.formData.whitelist, (w: any) => {\n\n      let address;\n      if(w.type == 'wallet') {\n        address = this.getAllWallets().then((wallets) => {\n          let foundWallet = _.find(wallets, { id: w.walletClientId });\n          return foundWallet.createAddress().then((resp) => {\n              return this.bitcore.Address.fromString(resp.address);\n          });\n        });\n      } else {\n        address = Promise.resolve(this.bitcore.Address.fromString(w.address));\n      }\n      return address;\n    }).then((whitelist) => {\n      newVault.whitelist = _.map(whitelist, (a) => {return a.toBuffer()});\n      newVault.masterKey = this.formData.masterKey;\n      newVault.name = this.formData.vaultName;\n      this.navCtrl.push('VaultRenewConfirmationView', { vaultId: this.vault._id, vault: this.vault, updatedVault: newVault, walletClient: this.walletClient });      \n    });\n  }\n\n  regenerateMasterKey() {\n    let network = this.walletClient.credentials.network || this.configService.getDefaults().network.name;\n    let masterKey = this.bitcore.PrivateKey.fromRandom(network);\n    let masterKeyMnemonic = this.walletClient.getNewMnemonic(masterKey.toBuffer());\n\n    this.formData.masterKey = masterKey;\n\n    this.popupService.ionicAlert(\n        'Master key',\n        masterKeyMnemonic,\n        'I copied the Master Key.'\n    );\n  }\n\n  compareWhitelistEntries(e1: IWhitelistEntry, e2: IWhitelistEntry): boolean {\n    return e1.type == e2.type && e1.id == e2.id;\n  }\n\n  private updateWhitelist(): Promise<any> {\n    return Promise.all([\n      // fetch users wallets\n      this.getAllWallets().then((wallets) => {\n        return _.map(wallets, (w) => {\n          const name = w.name || w._id;\n          const addr = this.bitcore.HDPublicKey.fromString(w.credentials.xPubKey).publicKey.toAddress().toString();\n          return { 'id': w.id, 'name': name, 'address': addr, 'type': 'wallet', walletClient: w, walletClientId: w.id };\n        });\n      }), \n      // fetch users vaults\n      // ToDo: uncomment when vaults support vault addresses in whitelists\n      // this.getAllWVaults().then((vaults) => {\n      //   return _.map(vaults, (v) => {\n      //     const name = v.name || v._id;\n      //     const addr = new this.bitcore.Address(v.address).toString();\n      //     return { 'id': v._id, 'name': name, 'address': addr, 'type': 'vault' }; \n      //   });\n      // }),\n    ]).then((arr: Array<Array<IWhitelistEntry>>) => {\n      const whitelistCandidates = _.flatten(arr);\n      const filtered = _.reject(whitelistCandidates, { id: this.vault._id });\n      this.whitelistCandidates = filtered;\n      \n      return Promise.map(this.vault.whitelist, (wl: string) => {\n        return Promise.map(whitelistCandidates, (candidate) => {\n          if (candidate.type === 'vault') {\n            if (wl == candidate.address) return candidate;\n          } else { \n            return candidate.walletClient.getMainAddresses({}).then((addresses: Array<any>) => {\n              const found = _.find(addresses, { address: wl });\n              candidate.walletClient = null;\n              if (found) {\n                candidate.address = wl;\n                return candidate;\n              }\n            });\n          }\n          return null;\n        });\n      }).then((unfilteredWhitelist) => {\n        const results = _.compact(_.flatten(unfilteredWhitelist));\n        this.formData.whitelist = results;\n        return Promise.resolve();\n      });\n    });\n  }\n\n  private getAllWallets(): Promise<Array<any>> {\n    const wallets = this.profileService.getWallets().then((ws) => {\n      this.walletClient = _.head(ws);\n      return Promise.all(_.map(ws, async (wallet:any) => {\n        wallet.status = await this.walletService.getStatus(wallet);\n        return wallet; \n      }));\n    })\n    return wallets;\n  }\n\n  private getAllWVaults(): Promise<Array<any>> {\n    return this.profileService.getWallets().then((ws: any[]) => {\n      if (_.isEmpty(ws)) {\n        Promise.reject(new Error('getAllWVaults failed')); //ToDo: add proper error handling;\n      }\n      return _.head(ws);\n    }).then((walletClient) => {\n      this.walletClient = walletClient;\n      return this.vaultsService.getVaults(walletClient);\n    });\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/app/vaults/renew-vault/renew-vault.ts"],"sourceRoot":""}